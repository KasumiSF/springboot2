server:
    port:8443 
    ssl:
        key-store:file:///path/to/mykeys.jks
        key-store-password:letmein 
        key-password:letmein


logging:
    path: /var/logs/
    file: BookWorm.log 
    level:
        root: WARN 
        org:
            springframework:
                security:DEBUG

spring:
    datasource:
    url: jdbc:mysql://localhost/cmscp 
    username: dbuser 
    password: dbpass 


#你也可以设置spring.datasource.jndi-name属性，从JNDI里查找DataSource：
#spring:
#datasource:
#jndi-name: java:/comp/env/jdbc/readingListDS
#一旦设置了spring.datasource.jndi-name属性，其他数据源连接属性都会被忽略，除
#非没有设置别的数据源连接属性。



#spring:
    profiles:
        active: production 
#当应用程序需要部署到不同的运行环境时，一些配置细节通常会有所不同。比如，数据库连
#接的细节在开发环境下和测试环境下就会不一样，在生产环境下又不一样。Spring Framework从
#Spring 3.1开始支持基于Profile的配置。Profile是一种条件化配置，基于运行时激活的Profile，会
#使用或者忽略不同的Bean或配置类

#这里用的@Profile注解要求运行时激活production Profile，这样才能应用该配置。如果
#production Profile没有激活，就会忽略该配置，而此时缺少其他用于覆盖的安全配置，于是应
#用自动配置的安全配置

#使用特定于Profile的属性文件
#如果你正在使用application.properties，可以创建额外的属性文件，遵循application-{profile}.
#properties这种命名格式，这样就能提供特定于Profile的属性了

#如果使用yml文件，application.yml文件分为多个部分，使用一组三个连字符（---）作为分隔符。
#每一段的spring.profiles指定了一个值，这个值表示该部分配置应该应用在哪个 Profile 里。



amazon.associateId=habuma-20 

#server.ssl.key-store-password和server.ssl.key-password设置为创建该文件时给定的密码。

#虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日
#志配置（见3.2.3节），这个功能会很有用。
